<?php

$jdat = json_decode(file_get_contents('../data/recipes.json'));

function getHash() {
    global $jdat;

    unset($jdat->deleted);
    $jstr = json_encode($jdat, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);

    //  json_encode() automatically removes whitespaces (spaces, tabs, newlines) in its return string
    //  Even if the data file is formatted for easy inspection in WebStorm, the hash value should compute correctly
    return hash('sha256', $jstr);
}

function reconcile($data) {
    global $jdat;

    $lastSync = $data->lastSync;

    //  Compile all changes since lastSync

    //  Compare provided activities with activities on disk
    //   - Resolve any id conflicts

    //   Server selects all activity since lastSync
    //   Checks transmitted vs. selected activity for ID conflict
    //    - Resolve or return error code

    //   Save new client activity to disk

    //  MAKE SURE $jdat REFLECTS ALL CHANGES BEFORE COMPUTING HASH IN FOLLOWING COMMAND

    //   Compute new server hash
    $newHash = getHash();

    //   Return selected activity and new hash
    $compiled = array("new" => array(), "modified" => array(), "deleted" => array(), "hash" => array());
    return json_encode($compiled, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
}

function saveNew($key, $inst) {

}

function modify() {

}

function remove() {

}

$request = json_decode(file_get_contents('php://input'));
$query = $request->query;
switch($query) {
//    case "count":
//        echo countTxn();
//        break;
    case "hash":
        echo getHash();
        break;
    case "reconcile":
        echo reconcile($request->data);
        break;
//    case "add":
//        echo saveNew($request->data);
//        break;
//    case "edit":
//        echo modify($request->data);
//        break;
//    case "delete":
//        echo remove($request->data);
//        break;
}

//  SINGLE PHP FILE TO HANDLE HASH, COUNT, STAMPS, INSTANCES, NEW, RECONCILE
//    - HASH IS MOST COMMON & SIMPLEST
//      - {query: 'hash'}
//      - return: hash()
//    - *COUNT IS QTY OF TXNS ON SERVER
//      - {query: 'count'}
//      - return: count()
//    - *STAMPS IS ARRAY OF INTEGER '_created' VALUES OF ALL TXNS ON FILE
//      - {query: 'stamps'}
//      - return: [array of _created values]]
//    - *INSTANCES IS ARRAY OF TXN INSTANCES SPECIFIED BY '_created' VALUES
//      - {query: 'txns', data: [array of _created values]}
//      - return: txns()
//    - ADD TRIGGERS ADDITION OF NEW TRANSACTION INSTANCE TO FILE & RETURNS HASH BY DEFAULT
//      - {query: 'add', data: {txn data obj}}
//      - return: hash()
//    - EDIT CHANGES GIVEN PROPERTIES OF A SPECIFIC TRANSACTION
//      - {query: 'edit', data: {txn data obj}}
//      - return: hash()
//    - DELETE REMOVES A TRANSACTION'S DATA AND MOVES IT TO THE 'DELETED' INDEX
//      - {query: 'delete', data: '_created value'}
//      - Remove indicated transaction from log entirely
//      - Add _created ID to deleted array along with time of request
//      - As with adds & edits, the timestamp should be generated by the client
//      - return: hash()
//    - RECONCILE IDENTIFIES POSSIBLE DISCREPANCIES GIVEN A SPECIFIC QUERY DATE
//      - {query: 'reconcile', data: 'timestamp'}
//      - return: {new: [array of txn instances], modified: [array of txn instances], deleted: [array of _created values]}
//
//  *MAY NOT IMPLEMENT THESE TO REDUCE DATA EXPOSURE

?>